generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
  joinedRooms   UserRoom[]
  lastSeen      DateTime?
  isOnline      Boolean   @default(false)
  pushSubscriptions PushSubscription[]
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  resetToken      String?
  resetTokenExpiry DateTime?
}

model UserRoom {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  joinedAt  DateTime @default(now())
  unreadCount Int @default(0)

  @@unique([userId, roomId])
}

model Room {
  id       String    @id @default(cuid())
  name     String
  description String?
  messages Message[]
  members       UserRoom[]  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())
  isPrivate     Boolean   @default(false)
  latestMessage Message?  @relation("LatestMessage", fields: [latestMessageId], references: [id])
  latestMessageId String? @unique
  icon            String?
  image           String?
  type            String?
  slug            String? 
}

model Message {
  id         String   @id @default(cuid())
  content    String
  media      Json?
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  roomId     String
  room       Room     @relation(fields: [roomId], references: [id])
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  isSystemMessage Boolean  @default(false)
  latestInRoom Room?  @relation("LatestMessage")
  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String
  p256dh    String
  auth      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum Provider {
  GOOGLE
  GITHUB
  YANDEX // Add this line
}